/*-------------------------------------- The Octantis Project --------------------------------------*/
//
// LiM Compiler Class: class useful for the generation of a LiM object.
//
/*-------------------------------------------- Licence ---------------------------------------------*/
//
// Â© Alessio Naclerio 2021 (alessio.naclerio@studenti.polito.it) for Politecnico di Torino
//
/*--------------------------------------------------------------------------------------------------*/
#ifndef LIMCOMPILERNEW_H
#define LIMCOMPILERNEW_H

//Octantis Include Files
#include "InstructionTable.h"
#include "LiMArray.h"
#include "AccessPattern.h"
#include "FiniteStateMachine.h"
#include "ASAP.h"
#include "CollectInfo.h"
#include "PointerInfoTable.h"
#include "InstructionMap.h"

//C++ Include files
#include <list>
#include <iterator>

//using namespace llvm;

namespace octantis{
///Class class useful for the generation of a LiM object.
class LimCompilerNew
{
public:
    ///Default constructor: it requires the instruction map in input in order to compile it into a Lim Array
    LimCompilerNew(InstructionMap &instructionMap, CollectInfo &infoCollection);

private:

    int par = 32;

    ///Variable for storing the first index of the addresses: this is useful
    ///for the generation of the lable for the new rows introduced inside the array.
    int * zeroAddr;

    ///Map for storing the names associatd to the element of an array
    std::map<int *, std::list<int *>> arrayNamesMap;

    ///Iterator over the arrayNamesMap
    std::map<int *, std::list<int *>>::iterator arrayNamesMapIT;

    ///Map for the organization of the operation of accumulation
    std::list<int *> accumulationList;

    ///Iterator over the accumulationList
    std::list<int *>::iterator accumulationListIT;

    //Effective LiM addresses
    int* src1;
    int* src2;
    int* dest;

    //They are useful for proper address calculations
    int countDest;
    int countSrc1;
    int countSrc2;

    ///Map in which the key field represent the  result row generated by the addition between the rows in the value field list
    std::map<int*, std::list<int*>> addMap;
    //Iterator over addMap
    std::map<int*, std::list<int*>>::iterator addMapIT;

    ///List containing all the single variables used as temp variables
    std::list<int*> tmpVariableList;
    ///Iterator over tmpVariableList
    std::list<int*>::iterator tmpVariableListIT;

    ///Map containing all the single variables used as temp variables and its pointer info
    std::map<int*, PointerInfoTable::pointerInfoStruct> tmpVariableMap;
    ///Iterator over tmpVariableMap
    std::map<int*, PointerInfoTable::pointerInfoStruct> ::iterator tmpVariableMapIT;

    //<srcOp, lastDestOp>
    std::map<int*, int*> lastDestMap;
    std::map<int*, int*>::iterator lastDestMapIT;

    /*
    ///Map where the key field refers to a pointer and the value field is its relative array access pattern
    std::map<int*, PointerInfoTable::arrayAccessPattern> arrayAccessPatternMap;
    ///Iterator over arrayAccessPatternMap
    std::map<int*, PointerInfoTable::arrayAccessPattern>::iterator arrayAccessPatternMapIT;
    */

private:
    ///Function to update the arrayNamesMap
    void addNewItem(int * const &origSrc, int * const &genName);
    
    ///Function to update the arrayNamesMap
    void addNewItemInRefPos(int * const &origSrc, int * const &genName);

    ///Function to find an element inside the arrayNamesMap
    std::map<int*,std::list<int*>>::iterator findInANM(int* srcReg);

    ///Function to get a new name for additional LiM rows
    int * getNewName();

    ///Function to adjust current address if needed
    void adjustName();

    ///It handles the binding process for operations
    void handleOperationBindingProcess(const bool &isSrc1SingleVar, const bool &isSrc2SingleVar, const bool &isDestSingleVar,
                                const bool &hasSrc1OneDim, const bool &hasSrc2OneDim, const bool &hasDestOneDim,
                                const bool &isSrc1Constant, const bool &isSrc2Constant,
                                int* &srcReg1, int* &srcReg2, int* &destReg, int* &srcReg1Ptr, int* &srcReg2Ptr, int* &destRegPtr, const int &constant,
                                const std::string &operation, const std::list<std::string> &specifications, const int &ti,
                                PointerInfoTable::pointerInfoStruct destRegPointerInfo, const PointerInfoTable::pointerInfoStruct &srcReg1PointerInfo,
                                const PointerInfoTable::pointerInfoStruct &srcReg2PointerInfo);

    ///Function useful to implement the binding over an accumulation set
    void performAccumulationBinding(std::list<int*> accumulationList, std::string operation, std::list<std::string> specifications,  int * srcReg1, int * destReg, int ti);

    ///It carries out the real binding to LiM Rows
    void realBinding(std::string operation, std::list<std::string> specifications, const int &ti,
                     const int &constant, const bool &isConstant, int* &destReg, const bool &isDestRealReg);

    ///It retrieves access pattern infos from PIT
    PointerInfoTable::arrayAccessPattern arrayAccessPatternHandler(int* reg,const PointerInfoTable::pointerInfoStruct &regPointerInfo,
                                    const bool &isRegSingleVar, const bool &hasRegOneDim, const bool &isRegConstant);

    ///It calculates the current address for the input reg based on input information
    int* addressHandling(PointerInfoTable::arrayAccessPattern patternType, int* reg, int* regPtr, const PointerInfoTable::pointerInfoStruct &regPointerInfo,
                         const bool &isRegSingleVar, const bool &hasRegOneDim, const bool &isRegConstant,
                         int i);

    int* searchForResult(int* &srcRow1, int* &srcRow2);
    
public:
    LiMArray MemArray;
    FiniteStateMachine FSMLim;
    CollectInfo InfoCollection;
    InstructionMap IM;
    

//-------------------------DEBUG FUNCTIONS----------------------
private:
    void printLiMArray();
    void printFSM();
    void printArrayNamesMap();

//---------------------END DEBUG FUNCTIONS----------------------

};

} //End Octantis namespace

#endif // LIMCOMPILERNEW_H
